# Python3 manifest example
#
# This manifest was prepared and tested on Ubuntu 16.04.

libos.entrypoint = "file:$(PYTHONEXEC)"

# Graphene environment, including the path of the library OS and the debug
# option (inline/none).
loader.preload = "file:$(RUNTIMEDIR)/libsysdb.so"
loader.debug_type = "$(GRAPHENEDEBUG)"

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = 1

# Environment variables for Python
loader.env.LD_LIBRARY_PATH = "$(PYTHON_STDLIB)/lib:/lib:$(ARCH_LIBDIR):/usr/lib:/usr/$(ARCH_LIBDIR)"
loader.env.PATH = "$(PYTHON_STDLIB)/bin:/usr/bin:/bin"
loader.env.HOME = "/home/user"

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR.
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:$(RUNTIMEDIR)"

# Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by the Python executable
fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "$(ARCH_LIBDIR)"
fs.mount.lib2.uri = "file:$(ARCH_LIBDIR)"

# Host-level directory (/usr) required by the Python executable
fs.mount.usr.type = "chroot"
fs.mount.usr.path = "/usr"
fs.mount.usr.uri = "file:/usr"

# Mount $PYTHONHOME
fs.mount.pyhome.type = "chroot"
fs.mount.pyhome.path = "$(PYTHON_STDLIB)"
fs.mount.pyhome.uri = "file:$(PYTHON_STDLIB)"

# Mount $PYTHONDISTHOME
fs.mount.pydisthome.type = "chroot"
fs.mount.pydisthome.path = "$(PYTHON_DISTLIB)"
fs.mount.pydisthome.uri = "file:$(PYTHON_DISTLIB)"

# Mount /tmp
fs.mount.tmp.type = "chroot"
fs.mount.tmp.path = "/tmp"
fs.mount.tmp.uri = "file:/tmp"

# Mount /etc
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

# Graphene general options

# Graphene creates stacks of 256KB by default. It is not enough for SciPy/NumPy
# packages, e.g., libopenblas dependency assumes more than 512KB-sized stacks.
sys.stack.size = "2M"

# SGX general options

sgx.nonpie_binary = 1

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If Python needs more virtual memory
# than the enclave size, Graphene will not be able to allocate it.
sgx.enclave_size = "1G"

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
sgx.thread_num = 32

# SGX trusted files

sgx.trusted_files.python = "file:$(PYTHONEXEC)"

# Glibc libraries
sgx.trusted_files.ld = "file:$(RUNTIMEDIR)/ld-linux-x86-64.so.2"
sgx.trusted_files.libc = "file:$(RUNTIMEDIR)/libc.so.6"
sgx.trusted_files.libm = "file:$(RUNTIMEDIR)/libm.so.6"
sgx.trusted_files.libdl = "file:$(RUNTIMEDIR)/libdl.so.2"
sgx.trusted_files.librt = "file:$(RUNTIMEDIR)/librt.so.1"
sgx.trusted_files.libutil = "file:$(RUNTIMEDIR)/libutil.so.1"
sgx.trusted_files.libpthread = "file:$(RUNTIMEDIR)/libpthread.so.0"

# Other libraries
sgx.trusted_files.libz = "file:$(ARCH_LIBDIR)/libz.so.1"
sgx.trusted_files.libbz2 = "file:$(ARCH_LIBDIR)/libbz2.so.1.0"
sgx.trusted_files.liblzma = "file:$(ARCH_LIBDIR)/liblzma.so.5"
sgx.trusted_files.libexpat = "file:$(ARCH_LIBDIR)/libexpat.so.1"
sgx.trusted_files.ctypes = "file:$(PYTHON_STDLIB)/lib-dynload/_ctypes$(PYTHON_EXT_SUFFIX)"
sgx.trusted_files.hashlib = "file:$(PYTHON_STDLIB)/lib-dynload/_hashlib$(PYTHON_EXT_SUFFIX)"
sgx.trusted_files.ssl = "file:$(PYTHON_STDLIB)/lib-dynload/_ssl$(PYTHON_EXT_SUFFIX)"
sgx.trusted_files.lapack_lite = "file:$(PYTHON_DISTLIB)/numpy/linalg/lapack_lite$(PYTHON_EXT_SUFFIX)"
sgx.trusted_files.multiarray = "file:$(PYTHON_DISTLIB)/numpy/core/multiarray$(PYTHON_EXT_SUFFIX)"
sgx.trusted_files.sparsetools = "file:$(PYTHON_DISTLIB)/scipy/sparse/_sparsetools$(PYTHON_EXT_SUFFIX)"

# SGX untrusted (allowed) files/directories
sgx.allowed_files.scripts = "file:scripts"
sgx.allowed_files.tmp = "file:/tmp"
sgx.allowed_files.etc = "file:/etc"
sgx.allowed_files.pyhome = "file:$(PYTHON_STDLIB)"
sgx.allowed_files.pydisthome = "file:$(PYTHON_DISTLIB)"
